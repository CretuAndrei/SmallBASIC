Strings
----------------------------
Spc()/Space()
Syntax:
SPC(n)/SPACE(n)

returns a string of 'n' spaces
----------------------------
Bin()/Oct()/Hex()

BIN(x)- binary string-value of x
OCT(x)- octal string-value of x
HEX(x)- hexadecimal string-value of x
----------------------------
Val()/Str()

VAL(s)- numeric value of string s
STR(x)- convert x to string
----------------------------
CBS()/BCS()

CBS()- converts (C)-style strings to (B)ASIC-style (S)trings
BCS()- converts (B)ASIC-style strings to (C)-style (S)trings

C-Style string means strings with \ codes

Note:
On CBS() we cannot use the \" character, but we can replace
it with \x22 or \042.
----------------------------
Chr()/Asc()

ASC(s)- ASCII code of first character of s
CHR(x)- returns one-char string of character with
ASCII code x
----------------------------
Lower()/Upper()/LCase()/UCase()
Syntax:
LOWER(s), UPPER(s)
or
LCASE(s), UCASE(s)

Converts the string s to lower/upper case

Example:
? LOWER("Hi"):REM hi
? UPPER("Hi"):REM HI
----------------------------
LTrim()/RTrim()/Trim()

LTRIM(s)- Removes leading white-spaces from string s
RTRIM(s)- Removes /trailing white-spaces from string s
TRIM(s)- Removes leading/trailing white-spaces from string s

Example:
? LEN(LTRIM(" Hi")):REM 2

TRIM is equal to LTRIM(RTRIM(s))
----------------------------
Squeeze()
Syntax: SQUEEZE(s)

Removes the leading/trailing and duplicated white-spaces

Example:
?"["; SQUEEZE(" Hi there ");"]"
' Result:[Hi there]
----------------------------
Enclose()/Disclose()
Syntax: ENCLOSE(str[, pair])

Encloses a string.
The default pair is ""

Example:
? enclose("abc","()")
' Result:(abc)
----------------------------
Disclose()
Syntax: DISCLOSE(str[, pairs [, ignore-pairs]])

Discloses a string.

Default pairs and ignore pairs

First
non white-space
character Check Ignore
----------------------------
"""''
'''""
(()""''
[[]""''
{{}""''
<<>""''

Otherwise:
"""''

Example:
s ="abc (abc)"
? s; tab(26); disclose(s,"()")
' prints abc
s ="abc (a(bc))"
? s; tab(26); disclose(s,"()"); tab(40); disclose(disclose(s,"()"),"()")
' prints a(bc), bc
s ="abc (a='(bc)')"
? s; tab(26); disclose(s,"()","''"); tab(40);&
disclose(disclose(s,"()","''"),"()","''")
' prints a='(bc)', nothing
----------------------------
Left()/Right()
Syntax: LEFT(s[,n]), RIGHT(s[,n])

Returns the n number of leftmost/rightmost chars of string s
If n is not specified, the SB uses 1
----------------------------
LeftOf()/RightOf()
Syntax:
LEFTOF(s1,s2),
RIGHTOF(s1,s2)

Returns the left/right part of s1 at the position of the first
occurrence of the string s2 into string s1

Note: s2 does not included on new string.
----------------------------
LeftOfLast()/RightOfLast()
Syntax:
LEFTOFLAST(s1,s2),
RIGHTOFLAST(s1,s2)

Returns the left/right part of s1 at the position of the last
occurrence of the string s2 into string s1

Note: s2 does not included on new string.
----------------------------
Mid()
Syntax: MID(s, start [,length])

Returns the part (length) of the string s starting from 'start'
position

If the 'length' parameter is omitted, MID returns the whole string
from the position 'start'.
----------------------------
InStr()
Syntax: INSTR([start,] s1, s2)

Returns the position of the first occurrence of the string s2 into
string s1 (starting from the position 'start')

If there is no match, INSTR returns 0
----------------------------
RInStr()
Syntax: RINSTR([start,] s1, s2)

Returns the position of the last occurrence of the string s2 into
string s1 (starting from the position 'start')

If there is no match, RINSTR returns 0
----------------------------
Replace()
Syntax: REPLACE(source, pos, str [, len])

Writes the 'str' into 'pos' of 'source' and returns the new string.

This function replaces only 'len' characters. The default value of
'len' is the length of 'str'.

Examples:
s="123456"
...
' Cut
? replace(s,3,"",len(s))
...
' Replace
? replace(s,2,"bcd")
...
' Insert
? replace(s,3,"cde",0)
...
' Replace & insert
? replace(s,2,"RRI",2)
----------------------------
Translate()
Syntax: TRANSLATE(source, what [, with])

Translates all occurrences of the string 'what' found in the 'source'
with the string 'with' and returns the new string.

Example:
? Translate("Hello world","o","O")
' displays: HellO wOrld
----------------------------
Chop()
Syntax: CHOP(source)

Chops off the last character of the string 'source' and returns
the result.
----------------------------
String()
Syntax: STRING(len,{ascii|str})

Returns a string containing 'len' times of string 'str' or the
character 'ascii'.
----------------------------
Format()
Syntax: FORMAT(format, val)

Returns a formated string.

Numbers:
# Digit or space

0 Digit or zero

^ Stores a number in exponential format.
Unlike QB's USING format this is a place-holder like the #.

. The position of the decimal point.

, Separator.

- Stores minus if the number is negative.

+ Stores the sign of the number.

Strings:
& Stores a string expression without reformatting it.

! Stores only the first character of a string expression.

\\ Stores only the first n + 2 characters of a string
expression, where n is the number of spaces between the
two backslashes.
Unlike QB, there can be literals inside the \\. These
literals are inserted in the final string.

Example:
? FORMAT("#,##0", 1920.6): REM prints 1,921
? FORMAT("\-\","abcde"): REM prints "abc-de"
----------------------------
SPrint
Syntax: SPRINT var;[USING...;]...

Create formated string and storing it to var

The syntax is the same with the PRINT command.

Example:
SPRINT s; 12.34; TAB(12); 11.23;

Note: you can use 'USG' instead of 'USING'
----------------------------
SInput
Syntax: SINPUT src; var [, delim][,var [, delim]]...

Splits the string 'src' into variables which are separated by
delimiters.

Example:
SINPUT "if x>1 then y"; vif,"", vcond,"then", vdo
? vcond, vdo
' result in monitor
' x>1 y
----------------------------
Split
Syntax:
SPLIT string, delimiters, words()[, pairs][USE expr]

Returns the words of the specified string into array 'words'

Example:
s="/etc/temp/filename.ext"
SPLIT s,"/.", v()
FOR i=0 TO UBOUND(v)
PRINT i;"[";v(i);"]"
NEXT
'
displays:
0 []
1 [etc]
2 [temp]
3 [filename]
4 [ext]
----------------------------
Join
Syntax: JOIN words(), delimiters, string

Returns the words of the specified string into array 'words'

Example:
s="/etc/temp/filename.ext"
SPLIT s,"/.", v()
JOIN v(),"/", s
PRINT "[";s;"]"
'
displays:
[/etc/temp/filename/ext]
----------------------------
