#!/bin/sh

DIALOG=dialog
tmp=/tmp/sb_menu_config
backtitle="SmallBASIC 0.9"
menu_instructions="\
Arrow keys navigate the menu. <Enter> selects submenus. Highlighted letters are hotkeys.
"
threads=-j 16

###############################
# pause :)
pause()
{
	echo "Press [ENTER] to continue..."
	read x
}

###############################
# execute make (build sb-compiler)
shmake()
{
	make ${threads} $1
	echo -e \\a
	pause
}

###############################
# build module
shmake_mod()
{
	cd modules/$1
	make clean && make
	cd ../..
	pause
}

###############################
# show the README file.
function show_readme () {
	$DIALOG --backtitle "$backtitle" \
		--textbox README.Menuconfig $ROWS $COLS
}

###############################
# build compiler
build_menu()
{
	$DIALOG --backtitle "$backtitle" \
		--title "Build Compiler Menu" \
		--menu "$menu_instructions" $((ROWS-5)) $((COLS-10)) $((ROWS-15)) \
		f  "Unix/Framebuffer  --- Kernel 2.4.5 or above required" \
		s  "Unix/SDL          --- SDL 1.2.5 or above required" \
		v  "Unix/SVGALIB      --- SVGALIB 1.9.16 or above required" \
		" " " " \
		dg "DOS (DJGPP/GRX20) --- Cross compiler and GRX20 lib are req." \
		wc "Win32 (Cygwin)    --- Cross compiler is req. Graphics are disabled" \
		" " " " \
		p  "PalmOS/DragonBall --- PalmOS 3.1 up to 4.1, prc-tools 2" \
		pa "PalmOS/StrongARM  --- PalmOS 5, prc-tools-arm" \
		" " " " \
		h  "Helio VTOS" \
		e  "Franklin eBookMan" \
		" " " " \
		q "Exit" 2> $tmp

	choice=`cat $tmp`
	case $choice in
		f) shmake fb;;
		s) shmake sdl;;
		v) shmake svga;;
		dg) shmake dos;;
		wc) shmake cyg;;
		p) shmake palm;;
		pa) shmake palm-arm;;
		h) shmake vtos;;
		e) shmake febm;;
	esac
}

###############################
# build modules
mod_menu()
{
	$DIALOG --backtitle "$backtitle" \
		--title "Build Modules Menu" \
		--menu "$menu_instructions" $((ROWS-5)) $((COLS-10)) $((ROWS-15)) \
		1  "Unix/MySQL - MySQL" \
		2  "Unix/GDBM  - GNU DataBase Manager" \
		" " " " \
		q "Exit" 2> $tmp

	choice=`cat $tmp`
	case $choice in
		1) shmake_mod mysql;;
		2) shmake_mod gdbm;;
	esac
}

###############################
# build library
lib_menu()
{
	$DIALOG --backtitle "$backtitle" \
		--title "Build-library menu" \
		--menu "$menu_instructions" $((ROWS-5)) $((COLS-10)) $((ROWS-15)) \
		lc "Unix Library --- SB as library without graphics driver" \
		" " " " \
		lf "Unix Library --- Framebuffer driver (used with library)" \
		ls "Unix Library --- SDL driver         (used with library)" \
		lv "Unix Library --- SVGALIB driver     (used with library)" \
		" " " " \
		q "Exit" 2> $tmp

	choice=`cat $tmp`
	case $choice in
		lc) shmake lib;;
		lf) shmake libfbdrv;;
		ls) shmake libsdldrv;;
		lv) shmake libsvgadrv;;
	esac
}

###############################
# build IDE
ide_menu()
{
	$DIALOG --backtitle "$backtitle" \
		--title "Build-IDE menu" \
		--menu "$menu_instructions" $((ROWS-5)) $((COLS-10)) $((ROWS-15)) \
		ic "Unix IDE / console --- EXPERIMENTAL" \
		if "Unix IDE / FLTK    --- EXPERIMENTAL" \
		" " " " \
		q "Exit" 2> $tmp

	choice=`cat $tmp`
	case $choice in
		ic) shmake idecon;;
		if) shmake idefl;;
	esac
}

###############################
# build documents
doc_menu()
{
	ug="SB User's Guide"
	si="SB Intern - Information for C developers"
	tu="SB Tutorial"
	ex="--- EXPERIMENTAL"
	$DIALOG --backtitle "$backtitle" \
		--title "Build Documents Menu" \
		--menu "$menu_instructions" $((ROWS-5)) $((COLS-10)) $((ROWS-15)) \
		um "$ug - Man Page" \
		ui "$ug - Info Pages" \
		uh "$ug - HTML Pages" \
		ua "$ug - ASCII Pages" \
		ud "$ug - DVI Book" \
		up "$ug - PDF Book" \
		" " " " \
		tae "$tu - English - HTML,ASCII,DVI,PDF $ex" \
		tag "$tu - Greek   - HTML,ASCII,DVI,PDF $ex" \
		" " " " \
		si "$si - HTML" \
		" " " " \
		q "Exit" 2> $tmp

	choice=`cat $tmp`
	case $choice in
		um) shmake man;;
		ua) shmake txt;;
		ui) shmake info;;
		uh) shmake html;;
		up) shmake pdf;;
		ud) shmake dvi;;
		si) shmake sbint;;
	esac
}

###############################
# main-menu
root_menu()
{
	$DIALOG --backtitle "$backtitle" \
		--title "Main menu" \
		--menu "$menu_instructions" $((ROWS-5)) $((COLS-10)) $((ROWS-15)) \
		bc "Build Compiler   --->" \
		bm "Build Modules    --->" \
		bl "Build Library    --->" \
		bi "Build IDE        --->" \
		bd "Build Documents  --->" \
		" " " " \
		R  "README" \
		" " " " \
		q "Exit" 2> $tmp

	choice=`cat $tmp`
	case $choice in
		bc) build_menu;;
		bm) mod_menu;;
		bl) lib_menu;;
		bi) ide_menu;;
		bd) doc_menu;;
		R) show_readme;;
		q) exit;;
	esac
}

###############################
#
# 	main
#
set_geometry()
{
        LINES=  COLUMNS=

        ROWS=${1:-24}  COLS=${2:-80}

        # Just in case the nasty rlogin bug returns.
        #
        [ $ROWS = 0 ] && ROWS=24
        [ $COLS = 0 ] && COLS=80

        if [ $ROWS -lt 24 -o $COLS -lt 80 ]
        then
                echo -e "\n\007Your display is too small to run Menuconfig!"
                echo "It must be at least 24 lines by 80 columns."
                exit 1
        fi

        ROWS=$((ROWS-4))  COLS=$((COLS-5))
}


set_geometry `stty size 2>/dev/null`

while true ;
	do root_menu ;
done




