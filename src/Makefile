#
#	SmallBASIC makefile for Unices, PalmOS, DOS (cross-tools), Win32 (cross-tools)
#

SBVER=0.9.4

##########################################
#
#   Unix
#
UCC=gcc
UCCP=g++

# CHECK_PTRS_LEV2 is a very slowly algorithm to check pointers, needed only for debug
PTRCHECK   =
#PTRCHECK  = -DCHECK_PTRS_LEV2
SHOBJ      = -fPIC
SHEXE      = -Wl,-export-dynamic

#-pedantic 
#CPPFLAGS   = -g -O2 -DUNIX_MEMMGR -DUSE_PCRE -D_UnixOS -Wall -I/usr/local/include $(PTRCHECK) $(SHOBJ)
CPPFLAGS   = -g -D_UnixOS -DUSE_PCRE -Wall $(PTRCHECK) $(SHOBJ)
CFLAGS     = $(CPPFLAGS)
ULIBS=$(SHEXE) -lm -ldl -lpthread -lncurses -lreadline -lpcre
LIBDIR=/usr/local/lib

##########################################
#
#   Win32/console (cross-compile from Unix)
#
WCC = gcc-win32
WDRES=/usr/local/cross-tools/bin/i386-mingw32msvc-windres

WCPPFLAGS = -O2 -w -D_Win32
WCFLAGS   = $(WCPPFLAGS)

##########################################
# directories

# temporaries (objects)
TMPDIR=../tmp
TMPPLM=../tmp/palm
TMPVTS=../tmp/vtos
TMPEBM=../tmp/ebm
TMPUNX=../tmp/unix
TMPDOS=../tmp/dos
TMPW32=../tmp/w32

# executables
BINDIR=../bin

# binary data (resources)
BDTDIR=../data
BDTPLM=../data/palm
BDTVTS=../data/vtos
BDTEBM=../data/ebm
BDTUNX=../data/unix
BDTDOS=../data/dos
BDTW32=../data/dos

# backup
BACKUPDIR=../backup

# Install
INSTALLBIN=/usr/local/bin
INSTALLDOC=/usr/local/doc/SmallBASIC

sources=\
	brun.c ceval.c eval.c str.c match.c fmt.c kw.c sberr.c \
	mem.c panic.c blib.c bc.c file.c blib_db.c blib_math.c geom.c \
	var.c proc.c blib_func.c blib_sound.c inet.c vmt.c \
	blib_graph.c scan.c circle.c ffill.c pfill.c g_bmp.c \
	blib_ui.c plot.c units.c tasks.c extlib.c \
    fs_stream.c fs_serial.c fs_memo.c fs_pdoc.c fs_socket_client.c fs_irda.c

unix_src=$(sources) unx_memmgr.c dev_term.c g_line.c decomp.c console_main.c interactive_mode.c help_subsys.c
ulib_src=$(sources) unx_memmgr.c dev_term.c g_line.c decomp.c cxx_sb.cpp
fbdrv_src=dev_ndcfb.c dev_genfb.c device.c dev_oss.c
sdldrv_src=dev_sdl.c device.c

w32_src=$(sources) unx_memmgr.c dev_term.c g_line.c decomp.c console_main.c

help_files=doc/guide.c messages.h

# object files for each platform (automatically generated by make)
unix_obj   = $(addprefix $(TMPUNX)/, $(addsuffix .o, $(basename $(unix_src))))
ulib_obj   = $(addprefix $(TMPUNX)/, $(addsuffix .o, $(basename $(ulib_src))))
fbdrv_obj  = $(addprefix $(TMPUNX)/, $(addsuffix .o, $(basename $(fbdrv_src))))
sdldrv_obj = $(addprefix $(TMPUNX)/, $(addsuffix .o, $(basename $(sdldrv_src))))
w32_obj    = $(addprefix $(TMPW32)/, $(addsuffix .o, $(basename $(unix_src))))

# default
all: help

help_subsys.c: $(help_files)
	touch help_subsys.c

######################
#
#	WIN32
#

#
#   Graphics drivers:
#

#
#   Add-on sound drivers:
#
W32DRVS=
W32DRVSCMD=

$(TMPW32)/%.o: %.c
	$(WCC) $(WCFLAGS) -c $< -o $@

$(TMPW32)/w32res.o: w32_main.rc
	$(WDRES) w32_main.rc $(TMPW32)/w32res.o

$(BINDIR)/sbrw32.exe: $(w32_obj) w32_main.c dev_w32.c $(W32DRVS) unix/rom16.c device.c $(TMPW32)/w32res.o  $(help_files)
	$(WCC) $(WCFLAGS) -mwindows -mthreads device.c w32_main.c dev_w32.c $(TMPW32)/w32res.o $(W32DRVSCMD) $(w32_obj) -o $(BINDIR)/sbrw32.exe -lm -lgcc -lws2_32 

$(BINDIR)/sbrw32f.exe: $(w32_obj) w32_main.c dev_w32f.c dev_genfb.c $(W32DRVS) unix/rom16.c device.c $(TMPW32)/w32res.o
	$(WCC) $(WCFLAGS) -mwindows -mthreads device.c w32_main.c dev_w32f.c dev_genfb.c $(TMPW32)/w32res.o $(W32DRVSCMD) $(w32_obj) -o $(BINDIR)/sbrw32.exe -lm -lgcc -lws2_32

######################
#
#	Unix
#

#
#   Graphics drivers:
#       dev_ndcfb.c/dev_genfb.c:    my framebuffer library
#       dev_uvga.c:     SVGALIB (mouse supported)
#       dev_sdl.c:      SDL graphics lib (sound and mouse supported)
#       dev_ufb.c:      OFBIS framebuffer lib (mouse it does not working on my PC)
#       dev_x.c:        X11, this driver does not working (mouse supported)
#       dev_xf.c:       X11 by using 'generic framebuffer' driver
#


#
#   Add-on sound drivers:
#       dev_oss.c: /dev/dsp, don't use it with SDL driver
#
#   Add-on mouse drivers:
#       dev_gpm.c: it does not working 
#

$(TMPUNX)/%.o: %.c
	$(UCC) $(CFLAGS) -c $< -o $@

$(TMPUNX)/%.o: %.cpp
	$(UCC) $(CFLAGS) -c $< -o $@

#	take a look how we are using a different driver ;)

# unix console/svgalib with OSS sound (dev_uvga.c is the driver, rom16.c is the font)
$(BINDIR)/svgasbasic: $(unix_obj) dev_uvga.c unix/rom16.c dev_oss.c device.c $(help_files)
	$(UCC) $(CFLAGS) -DDRV_SOUND device.c dev_uvga.c dev_oss.c $(unix_obj) -o $(BINDIR)/svgasbasic $(ULIBS) -lvga -lvgagl
	ln -svf $(BINDIR)/svgasbasic $(BINDIR)/sbasic
	-@printf "\n\033[7m * %s * \033[0m\n\n" "SVGA Version ready"

# unix console/GGI with OSS sound (dev_ggi.c is the driver, rom16.c is the font)
$(BINDIR)/ggisbasic: $(unix_obj) dev_ggi.c unix/rom16.c dev_oss.c device.c $(help_files)
	$(UCC) $(CFLAGS) -DDRV_SOUND device.c dev_ggi.c dev_oss.c $(unix_obj) -o $(BINDIR)/ggisbasic $(ULIBS) -lggi -lgii
	ln -svf $(BINDIR)/ggisbasic $(BINDIR)/sbasic
	-@printf "\n\033[7m * %s * \033[0m\n\n" "GGI Version ready"

# unix console/framebuffer
$(BINDIR)/fbsbasic: $(unix_obj) dev_ndcfb.c dev_genfb.c device.c dev_oss.c $(help_files)
	$(UCC) $(CFLAGS) -DDRV_SOUND dev_ndcfb.c dev_genfb.c dev_oss.c device.c $(unix_obj) -o $(BINDIR)/fbsbasic $(ULIBS)
	ln -svf $(BINDIR)/fbsbasic $(BINDIR)/sbasic
	-@printf "\n\033[7m * %s * \033[0m\n\n" "FrameBuffer Version ready"

# unix console/lcgi(x)
$(BINDIR)/lcgisbasic: $(unix_obj) dev_lcgi.c device.c dev_oss.c $(help_files)
	$(UCC) $(CFLAGS) -DDRV_SOUND dev_lcgi.c dev_oss.c device.c $(unix_obj) -o $(BINDIR)/lcgisbasic $(ULIBS) -llcgi
	ln -svf $(BINDIR)/lcgisbasic $(BINDIR)/sbasic
	-@printf "\n\033[7m * %s * \033[0m\n\n" "LCGI Version ready"

# unix console/XWin (dev_x.c is the driver)
$(BINDIR)/xsbasic: $(unix_obj) dev_x.c device.c dev_oss.c $(help_files)
	$(UCC) $(CFLAGS) -DDRV_SOUND dev_x.c device.c dev_oss.c $(unix_obj) -o $(BINDIR)/xsbasic -L/usr/X11R6/lib $(ULIBS) -lX11 -lXext
	ln -svf $(BINDIR)/xsbasic $(BINDIR)/sbasic
	-@printf "\n\033[7m * %s * \033[0m\n\n" "X Version ready, not suggested; try SDL"

# unix console/XWin (dev_xf.c is the driver)
$(BINDIR)/xfsbasic: $(unix_obj) dev_xf.c device.c dev_oss.c $(help_files)
	$(UCC) $(CFLAGS) -DDRV_SOUND dev_xf.c dev_genfb.c device.c dev_oss.c $(unix_obj) -o $(BINDIR)/xfsbasic -L/usr/X11R6/lib $(ULIBS) -lX11 -lXext
	ln -svf $(BINDIR)/xfsbasic $(BINDIR)/sbasic
	-@printf "\n\033[7m * %s * \033[0m\n\n" "X(f) Version ready, not suggested; try SDL"

# unix console/SDL (dev_sdl.c is the driver)
$(BINDIR)/sdlsbasic: $(unix_obj) dev_sdl.c device.c $(help_files)
	$(UCC) $(CFLAGS) dev_sdl.c device.c $(unix_obj) -o $(BINDIR)/sdlsbasic $(ULIBS) -lSDL
	ln -svf $(BINDIR)/sdlsbasic $(BINDIR)/sbasic
	-@printf "\n\033[7m * %s * \033[0m\n\n" "SDL Version ready"

# unix library! (note: ncurses (actually termcap) used when SB outputs on terminal... it is not the driver)
$(LIBDIR)/libsbasic.so: $(ulib_obj)
	-rm -f $(LIBDIR)/libsbasic.a
	ar rcs $(LIBDIR)/libsbasic.a $(ulib_obj)
	gcc -shared -Wl,-soname,libsbasic.so -o $(LIBDIR)/libsbasic.so.$(SBVER) $(ulib_obj) -lm -lncurses -ldl
	-ldconfig
	-@printf "\n\033[7m * %s * \033[0m\n\n" "Library! Version ready"

# unix console/framebuffer driver library (sound missing)
$(LIBDIR)/libsbfbdrv.so: $(fbdrv_obj)
	-rm -f $(LIBDIR)/libsbfbdrv.a
	ar rcs $(LIBDIR)/libsbfbdrv.a $(fbdrv_obj)
	gcc -shared -Wl,-soname,libsbfbdrv.so -o $(LIBDIR)/libsbfbdrv.so.$(SBVER) $(fbdrv_obj) -lpthread -lm
	-ldconfig
	-@printf "\n\033[7m * %s * \033[0m\n\n" "FrameBuffer library driver ready"

# unix SDL driver library
$(LIBDIR)/libsbsdldrv.so: $(sdldrv_obj)
	-rm -f $(LIBDIR)/libsbsdldrv.a
	ar rcs $(LIBDIR)/libsbsdldrv.a $(sdldrv_obj)
	gcc -shared -Wl,-soname,libsbsdldrv.so -o $(LIBDIR)/libsbsdldrv.so.$(SBVER) $(sdldrv_obj) -lpthread -lm -lSDL
	-ldconfig
	-@printf "\n\033[7m * %s * \033[0m\n\n" "SDL library driver ready"

######################
svga: $(BINDIR)/svgasbasic
ggi: $(BINDIR)/ggisbasic
x: $(BINDIR)/xsbasic
xf: $(BINDIR)/xfsbasic
sdl: $(BINDIR)/sdlsbasic
fb: $(BINDIR)/fbsbasic
lcgi: $(BINDIR)/lcgisbasic
ofb: $(BINDIR)/ofbsbasic
w32: $(BINDIR)/sbrw32.exe $(BINDIR)/bas2pdb32.exe $(BINDIR)/mkpdb32.exe
w32f: $(BINDIR)/sbrw32f.exe $(BINDIR)/bas2pdb32.exe $(BINDIR)/mkpdb32.exe
lib: $(LIBDIR)/libsbasic.so
libfbdrv: $(LIBDIR)/libsbfbdrv.so
libsdldrv: $(LIBDIR)/libsbsdldrv.so

DOSDIR=dos-djgpp
dos:
	make -C $(DOSDIR)
	-@cp $(DOSDIR)/bin/* $(BINDIR)
	-ls $(DOSDIR)/bin/ -l
	-@printf "\n\033[7m * %s * \033[0m\n\n" "DOS version ready"

CYGDIR=cygwin
cyg:
	make -C $(CYGDIR)
	-@cp $(CYGDIR)/bin/* $(CYGDIR)
	-ls $(CYGDIR)/bin/ -l
	-@printf "\n\033[7m * %s * \033[0m\n\n" "CygWin version ready"

PALMDIR=palmos
palm:
	make -C $(PALMDIR)
	-@cp $(PALMDIR)/bin/* $(BINDIR)
	-ls $(PALMDIR)/bin/ -l
	-@printf "\n\033[7m * %s * \033[0m\n\n" "PalmOS version ready"

VTOSDIR=helio
vtos:
	make -C $(VTOSDIR)
	-@cp $(VTOSDIR)/bin/* $(BINDIR)
	-ls $(VTOSDIR)/bin/ -l
	-@printf "\n\033[7m * %s * \033[0m\n\n" "VTOS version ready"

EBMDIR=ebm
febm:
	make -C $(EBMDIR)
	-@cp $(EBMDIR)/bin/* $(BINDIR)
	-ls $(EBMDIR)/bin/ -l
	-@printf "\n\033[7m * %s * \033[0m\n\n" "EBM version ready"

ICNDIR=ide-console
idecon:
	make -C $(ICNDIR)
	-@cp $(ICNDIR)/bin/* $(BINDIR)
	-ls $(ICNDIR)/bin/ -l
	-@printf "\n\033[7m * %s * \033[0m\n\n" "Console IDE version ready"

IFLDIR=ide-fltk
idefl:
	make -C $(IFLDIR)
	-@cp $(IFLDIR)/bin/* $(BINDIR)
	-ls $(IFLDIR)/bin/ -l
	-@printf "\n\033[7m * %s * \033[0m\n\n" "FLTK IDE version ready"

######################
#
#	Utilities
#

# DOS
$(BINDIR)/bas2pdb.exe: bas2pdb.cc
	$(DCC) $(DCFLAGS) -D_BAS2PDB bas2pdb.cc -o $(BINDIR)/bas2pdb.exe
	$(DCC) $(DCFLAGS) -D_PDB2BAS bas2pdb.cc -o $(BINDIR)/pdb2bas.exe

$(BINDIR)/mkpdb.exe: mkpdb.c
	$(DCC) $(DCFLAGS) -D_DOS mkpdb.c -o $(BINDIR)/mkpdb.exe

# Win32
$(BINDIR)/bas2pdb32.exe: bas2pdb.cc
	$(WCC) $(WCFLAGS) -D_Win32 -D_BAS2PDB bas2pdb.cc -o $(BINDIR)/bas2pdb32.exe
	$(WCC) $(WCFLAGS) -D_Win32 -D_PDB2BAS bas2pdb.cc -o $(BINDIR)/pdb2bas32.exe

$(BINDIR)/mkpdb32.exe: mkpdb.c
	$(WCC) $(WCFLAGS) -D_Win32 mkpdb.c -o $(BINDIR)/mkpdb32.exe

# Unix
$(BINDIR)/bas2pdb: bas2pdb.cc
	$(UCCP) $(CFLAGS) -D_BAS2PDB bas2pdb.cc -o $(BINDIR)/bas2pdb
	$(UCCP) $(CFLAGS) -D_PDB2BAS bas2pdb.cc -o $(BINDIR)/pdb2bas

$(BINDIR)/mkpdb: mkpdb.c
	$(UCC) $(CFLAGS) mkpdb.c -o $(BINDIR)/mkpdb

dumpvmt: dumpvmt.c vmt.c mem.c unx_memmgr.c panic.c
	$(UCC) $(CFLAGS) -D_UnixOS dumpvmt.c vmt.c mem.c unx_memmgr.c panic.c -o dumpvmt 

##############

send: $(BINDIR)/sbpad.prc
	$(PILOTXFER) -i $(BINDIR)/sbpad.prc

######################
#	Backup
zip: backup

backup:
	-rm -f $(BACKUPDIR)/sync-`date +"%Y-%m-%d"`.zip
	zip -r $(BACKUPDIR)/sync-`date +"%Y-%m-%d"`.zip * -x *.bin *.o

######################
#	Clean-up
clean:
	-make -C $(PALMDIR) clean
	-make -C $(DOSDIR) clean
	-make -C $(CYGDIR) clean
	-make -C $(EBMDIR) clean
	-make -C $(VTOSDIR) clean
	-make -C $(ICNDIR) clean
	-make -C $(IFLDIR) clean
	-rm -f $(BINDIR)/* $(TMPDIR)/* $(TMPPLM)/* $(TMPUNX)/* $(TMPDOS)/* $(TMPW32)/* $(LIBDIR)/libsbasic.so $(LIBDIR)/libsb{fb,sdl}drv.so
	-rm -f $(TMPVTS)/* $(TMPEBM)/*
	-rm -f win32/*.obj win32/*.exe win32/*.tds sbpad.map samples/*.pdb
	-rm -f diff.lst *~ *.bak *sections.* win32/*.~*
	-rm -f build_sbgo_icons
	-rm -f *.obj *.~?

cunix:
	-rm -f $(BINDIR)/* $(TMPUNX)/* $(LIBDIR)/libsbasic.so $(LIBDIR)/libsb{fb,sdl}drv.so

######################
#	doxy
sbint:
	doxygen

######################
#
#	Install
#
install: $(BINDIR)/bas2pdb $(BINDIR)/bas2pdb
	cp $(BINDIR)/*sbasic $(INSTALLBIN)
	cp $(BINDIR)/bas2pdb $(INSTALLBIN)
	cp $(BINDIR)/pdb2bas $(INSTALLBIN)
	cp $(BINDIR)/mkpdb $(INSTALLBIN)
	ln -svf $(INSTALLDIR)/fbsbasic     $(INSTALLBIN)/sbasic
	ln -svf $(INSTALLBIN)/sbasic       /usr/bin/sbasic

putils: $(BINDIR)/bas2pdb $(BINDIR)/mkpdb
	cp $(BINDIR)/bas2pdb $(INSTALLBIN)
	cp $(BINDIR)/pdb2bas $(INSTALLBIN)
	cp $(BINDIR)/mkpdb   $(INSTALLBIN)

devinstall: all
	ln -svf $(BINDIR)/bas2pdb   $(INSTALLBIN)/bas2pdb
	ln -svf $(BINDIR)/pdb2bas   $(INSTALLBIN)/pdb2bas
	ln -svf $(BINDIR)/sbasic     $(INSTALLBIN)/sbasic
	ln -svf $(BINDIR)/mkpdb     $(INSTALLBIN)/mkpdb
	ln -svf $(BINDIR)/svgasbasic $(INSTALLBIN)/svgasbasic
	ln -svf $(BINDIR)/ggisbasic $(INSTALLBIN)/ggisbasic
	ln -svf $(BINDIR)/fbsbasic   $(INSTALLBIN)/fbsbasic
	ln -svf $(BINDIR)/sdlsbasic  $(INSTALLBIN)/sdlsbasic
	ln -svf $(BINDIR)/xsbasic    $(INSTALLBIN)/xsbasic
	ln -svf $(BINDIR)/xfsbasic   $(INSTALLBIN)/xfsbasic
	# rehash

######################
#
#	Help
#
help:
	-@printf "\n\033[7m * %s * \033[0m\n" "SmallBASIC buildup menu"
	-@printf "\n(note: try \`make menuconfig')\n"
	-@printf "\nUnices\n"
	-@printf "\033[4m%s\033[0m\n" "console: make svga      --- Unix version (with SVGALIB) & utilities (recommended)"
	-@printf "\033[4m%s\033[0m\n" "console: make fb        --- Unix version with my FB lib (recommended/default)"
	-@printf "\033[4m%s\033[0m\n" "XFree86: make sdl       --- Unix version with SDL lib (recommended)"
	-@printf "\033[4m%s\033[0m\n" "XFree86: make ggi       --- Unix version with GGI lib (recommended)"
	-@printf "\nOther platforms\n"
	-@printf "\033[4m%s\033[0m\n" "PalmOS:  make palm      --- PalmOS version"
	-@printf "\033[4m%s\033[0m\n" "VTOS:    make vtos      --- VTOS version"
	-@printf "\033[4m%s\033[0m\n" "EBM:     make febm      --- Franklin's ebookman version"
	-@printf "\033[4m%s\033[0m\n" "DOS:     make dos       --- DOS (djgpp/GRX20) with Adlib support"
	-@printf "\033[4m%s\033[0m\n" "CYGWIN:  make cyg       --- CYGWIN (win32) without sound or graphics support"
	-@printf "\nExtras:\n"
	-@printf "%s\n" "         make send      --- Installs SmallBASIC to the Palm"
	-@printf "%s\n" "         make install   --- Installs sbasic & utilities to $(INSTALLBIN)"
	-@printf "%s\n" "         make putils    --- Builds and installs utilities for PalmOS (bas2pdb,pdb2bas,mkpdb) to $(INSTALLBIN)"
	-@printf "%s\n" "         make devinstall -- Installation process for developers"
	-@printf "%s\n" "         make sbint     --- Build 'SB internals' document"
	-@printf "\n"
	-@printf "%s\n" "         make clean     --- clean all"
	-@printf "\nUnder development:\n"
	-@printf "%s\n" "lib      make lib       --- library"
	-@printf "%s\n" "lib/fb   make libfbdrv  --- library (framebuffer driver to be used with sbasic lib)"
	-@printf "%s\n" "lib/sdl  make libsdldrv --- library (framebuffer driver to be used with sbasic lib)"
	-@printf "%s\n" "IDE      make idecon    --- Unix/console IDE"
	-@printf "%s\n" "IDE      make idefl     --- Unix/FLTK IDE"
	-@printf "\n"

###
menuconfig:
	./Menuconfig

# DO NOT DELETE
