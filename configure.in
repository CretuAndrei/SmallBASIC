dnl 
dnl "$Id: configure.in,v 1.38 2007-07-13 23:06:43 zeeb90au Exp $"
dnl 
dnl Configure script for SmallBASIC
dnl
dnl Copyright(C) 2001-2006 Chris Warren-Smith. Gawler, South Australia
dnl
dnl This program is distributed under the terms of the GPL v2.0
dnl Download the GNU Public License (GPL) from www.gnu.org
dnl

AC_INIT(configure.in)

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(smallbasic, 0.9.8.1)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

AC_PROG_CXX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_PROG_RANLIB

dnl define build arguments
AC_ARG_ENABLE(gtk,
  AC_HELP_STRING([--enable-gtk], [build gtk version(default=no)]),
  [ac_build_gtk="yes"],
  [ac_build_gtk="no"])

AC_ARG_ENABLE(fltk,
  AC_HELP_STRING([--enable-fltk], [build fltk version(default=no)]),
  [ac_build_fltk="yes"],
  [ac_build_fltk="no"])

AC_ARG_ENABLE(sdl,
  AC_HELP_STRING([--enable-sdl], [build SDL version(default=no)]),
  [ac_build_sdl="yes"],
  [ac_build_sdl="no"])

AC_ARG_ENABLE(dist,
  AC_HELP_STRING([--enable-dist], [prepare for make dist(default=no)]),
  [ac_build_dist="yes"],
  [ac_build_dist="no"])

function checkForWindows() {
   win32=no
   case "${host_os}" in
     *mingw* | pw32* | cygwin*)
     win32="yes"
     AC_CHECK_TOOL(WINDRES, windres, :)
   esac
   AM_CONDITIONAL(WITH_WIN32, test x"$win32" = "xyes")
}

function checkDebugMode() {
   AC_MSG_CHECKING([if debug mode is enabled])
   AC_ARG_WITH(debug,
   [  --with-debug            Build the debug version default=no],
       [with_debug=$withval],
       [with_debug=no])
   AC_MSG_RESULT([$with_debug])
   if test "$with_debug" = "yes" || test "$with_debug" = "full"
   then
     CFLAGS="-g -O0"
   else
     CFLAGS="-O3 -Os"
   fi
   AC_SUBST(CFLAGS)
}

function checkPCRE() {
   AC_CHECK_PROG(have_pcre, pcre-config, [yes], [no])
 
   if test "${have_pcre}" = "yes" ; then
      AC_DEFINE(USE_PCRE, 1, [match.c used with libpcre.])
      PACKAGE_LIBS="${PACKAGE_LIBS} `pcre-config --libs`"
   fi
}

function checkHILDON() {
   PKG_CHECK_MODULES(HILDON, hildon-libs >= 0.9.50 hildon-fm libossohelp)
   AC_SUBST(HILDON_LIBS)
   AC_SUBST(HILDON_CFLAGS)

   PKG_CHECK_MODULES(OSSO, osso-af-settings >= 0.8.5 libosso >= 0.9.17 
                     gnome-vfs-2.0 >= 2.8.4.11 gnome-vfs-module-2.0 >= 2.8.4.11)
   AC_SUBST(OSSO_LIBS)
   AC_SUBST(OSSO_CFLAGS)

   # To make application visible in maemo Task Navigator it needs a Desktop
   # file for the application.
   # D-BUS service file is needed to be able to launch the maemo application
   # and connect it to D-BUS services.
   # The following line defines install directories for these files.
   desktopentrydir=`$PKG_CONFIG osso-af-settings --variable=desktopentrydir`
   serviceentrydir=`$PKG_CONFIG osso-af-settings --variable=dbusservicedir`

   # Application locale install directory
   localedir=`$PKG_CONFIG osso-af-settings --variable=localedir`

   # Application pixmaps install directory
   pixmapdir=`$PKG_CONFIG osso-af-settings --variable=hildonpixmapdir`

   # Application icon install directories
   icon_26x26dir=$datadir/icons/hicolor/26x26/hildon
   icon_34x34dir=$datadir/icons/hicolor/34x34/hildon
   icon_40x40dir=$datadir/icons/hicolor/40x40/hildon
   icon_50x50dir=$datadir/icons/hicolor/50x50/hildon
   icon_scalabledir=$datadir/icons/hicolor/scalable/hildon

   # Help file install directory
   helpfile_engbdir=$datadir/osso-help/en_GB

   # Hildon control panel plugin install directories
   pluginlibdir=`$PKG_CONFIG hildon-control-panel --variable=plugindir`
   plugindesktopentrydir=`$PKG_CONFIG hildon-control-panel --variable=plugindesktopentrydir`

   # Define as variables in Makefiles
   AC_SUBST(desktopentrydir)
   AC_SUBST(serviceentrydir)
   AC_SUBST(localedir)
   AC_SUBST(pixmapdir)
   AC_SUBST(icon_26x26dir)
   AC_SUBST(icon_34x34dir)
   AC_SUBST(icon_40x40dir)
   AC_SUBST(icon_50x50dir)
   AC_SUBST(icon_scalabledir)
   AC_SUBST(pluginlibdir)
   AC_SUBST(plugindesktopentrydir)
   AC_SUBST(helpfile_engbdir)

   AC_DEFINE_UNQUOTED([LOCALEDIR], "${localedir}", [Runtime locale catalog files path])
   AC_DEFINE_UNQUOTED([PIXMAPDIR], "${pixmapdir}", [Runtime pixmap files path])

   PACKAGE_CFLAGS="${PACKAGE_CFLAGS} ${HILDON_CFLAGS} ${OSSO_CFLAGS}"
   PACKAGE_LIBS="${PACKAGE_LIBS} ${HILDON_LIBS} ${OSSO_LIBS}"
   ln -s sync/gtk/debian
}

function buildGTK() {
   echo "Building GTK version..."
 
   dnl disable build for hildon
   AC_ARG_ENABLE(hildon,
     AC_HELP_STRING([--disable-hildon], [disable hildon build (default=no)]),
     [ac_hildon_build="no"],
     [ac_hildon_build="yes"])

   AM_CONDITIONAL(WITH_HILDON, test "x$ac_hildon_build" = "xyes")

   if test "x$ac_hildon_build" = "xyes"; then
      AC_DEFINE(USE_HILDON, 1, [Define if building for hildon/maemo/n770.])
      checkHILDON
   else
      dnl check for gtk libraries
      pkg_modules="gtk+-2.0 >= 2.0.0"
      PKG_CHECK_MODULES(PACKAGE, [$pkg_modules])
      glade-2 -w sync/gtk/sbgtk.glade
   fi
 
   dnl preconfigured values for GTK build
   AC_DEFINE(_UnixOS, 1, [Building under Unix like systems.])
   AC_DEFINE(USE_TERM_IO, 0, [Does not use terminal-io functions.])
   AC_DEFINE(DEV_EVENTS_OSD, 1, [dev_events() implemented using osd_events().])
   AC_DEFINE(KBHIT_PWR_CONSERVE, 1, [Conserve power in dev_kbhit()])
   AC_DEFINE(DRV_SOUND, 1, [Driver implements functions in drvsound.h])
   AC_DEFINE(IMPL_IMAGE, 1, [Driver implements image commands])
   AC_DEFINE(IMPL_DEV_GETS, 1, [Driver implements dev_gets()])
   AC_DEFINE(IMPL_DEV_DELAY, 1, [Driver implements dev_delay()])
   AC_DEFINE(GTK_DISABLE_DEPRECATED, 1, [avoid building obsolete code)])
   AC_DEFINE(HILDON_DISABLE_DEPRECATED, 1, [avoid building obsolete code)])
   AC_DEFINE(IMPL_HTML, 1, [Driver implements the html command])
 
   BUILD_SUBDIRS="sync sync/gtk/src sync/gtk/data sync/gtk/icons"
   AC_SUBST(BUILD_SUBDIRS)
}

function buildFLTK() {
   echo "Building FLTK version..."
 
   dnl Checks for FLTK 2.x
   AC_CHECK_PROG(have_fltk, fltk2-config, [yes], [no])
 
   dnl do we HAVE the needed FLTK API VERSION ?
   HAVE_API_VERSION=no
 
   if test "${have_fltk}" = "yes" ; then
      FLTK_API_VERSION="`fltk2-config --api-version`"
      if test "${FLTK_API_VERSION}" = "2.0" ; then
         HAVE_API_VERSION=yes
      fi
   fi
 
   if test "${HAVE_API_VERSION}" = "no" ; then
       AC_MSG_ERROR([
     You need FLTK version 2.* installed with
     the program fltk2-config in your PATH in order to build sbfltk
     See the FLTK homepage at http://www.fltk.org/. 
   
   configure failed.
   ])
   fi
 
   PACKAGE_CFLAGS="${PACKAGE_CFLAGS} `fltk2-config --cxxflags` -Wall -Wunused -fno-exceptions"
   PACKAGE_LIBS="${PACKAGE_LIBS} `fltk2-config --ldstaticflags --use-images`"

   dnl do not depend on cygwin.dll under cygwin build
   case "${host_os}" in
     cygwin*)
     PACKAGE_CFLAGS="${PACKAGE_CFLAGS} -mms-bitfields -mno-cygwin"
     PACKAGE_LIBS="${PACKAGE_LIBS} -lwsock32"
   esac

   AM_CONDITIONAL(WITH_HILDON, false)
 
   dnl preconfigured values for FLTK build
   AC_DEFINE(_UnixOS, 1, [Building under Unix like systems.])
   AC_DEFINE(_FLTK, 0, [Defined for FLTK build.])
   AC_DEFINE(USE_TERM_IO, 0, [Does not use terminal-io functions.])
   AC_DEFINE(DEV_EVENTS_OSD, 1, [dev_events() implemented using osd_events().])
   AC_DEFINE(KBHIT_PWR_CONSERVE, 1, [Conserve power in dev_kbhit()])
   AC_DEFINE(IMPL_IMAGE, 1, [Driver implements image commands])
   AC_DEFINE(IMPL_HTML, 1, [Driver implements the html command])
   AC_DEFINE(IMPL_DEV_GETS, 1, [Driver implements dev_gets()])
 
   BUILD_SUBDIRS="sync sync/ide-fltk"
   AC_SUBST(BUILD_SUBDIRS)
}

function buildSDL() {
   echo "Building SDL version..."
   AM_CONDITIONAL(WITH_HILDON, false)

   dnl The following code was taken from the SDL test/configure.in
   dnl Figure out which math library to use
   MATHLIB=""
   SYS_GL_LIBS=""

   case "$host" in
    *-*-cygwin* | *-*-mingw32*)
        SYS_GL_LIBS="-lopengl32"
        PACKAGE_CFLAGS="${PACKAGE_CFLAGS} -mms-bitfields -mno-cygwin"
        PACKAGE_LIBS="${PACKAGE_LIBS} -lwsock32"
        ;;
    *-*-beos*)
        SYS_GL_LIBS="-lGL"
        ;;
    *-*-darwin* )
        SYS_GL_LIBS="-Wl,-framework,OpenGL"
        ;;
    *-*-aix*)
        if test x$ac_cv_prog_gcc = xyes; then
            CFLAGS="-mthreads"
        fi
        ;;
    *-*-mint*)
        AC_PATH_PROG(OSMESA_CONFIG, osmesa-config, no)
        if test "x$OSMESA_CONFIG" = "xyes"; then
            OSMESA_CFLAGS=`$OSMESA_CONFIG --cflags`
            OSMESA_LIBS=`$OSMESA_CONFIG --libs`
            CFLAGS="$CFLAGS $OSMESA_CFLAGS"
            SYS_GL_LIBS="$OSMESA_LIBS"
        else
            SYS_GL_LIBS="-lOSMesa"
        fi
        ;;
    *)
        MATHLIB="-lm"
        SYS_GL_LIBS="-lGL"
        ;;
   esac

   dnl Check for SDL
   SDL_VERSION=1.2.10
   AM_PATH_SDL($SDL_VERSION,
            :,
        AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
   )

   PACKAGE_CFLAGS="${PACKAGE_CFLAGS} ${SDL_CFLAGS}"
   PACKAGE_LIBS="${PACKAGE_LIBS} ${SDL_LIBS} ${MATHLIB}"

   dnl Check for OpenGL
   AC_MSG_CHECKING(for OpenGL support)
   have_opengl=no
   AC_TRY_COMPILE([
    #include "SDL/SDL_opengl.h"
   ],[
   ],[
   have_opengl=yes
   ])
   AC_MSG_RESULT($have_opengl)
   if test x$have_opengl = xyes; then
     PACKAGE_CFLAGS="${PACKAGE_CFLAGS} -DHAVE_OPENGL "
     PACKAGE_LIBS="${PACKAGE_LIBS} ${SYS_GL_LIBS}"
   fi

   dnl Check for SDL_Image
   AC_MSG_CHECKING(for SDL_Image support)
   have_sdl_image=no
   AC_TRY_COMPILE([
    #include "SDL/SDL_image.h"
   ],[
   ],[
   have_sdl_image=yes
   ])
   AC_MSG_RESULT($have_sdl_image)
   if test x$have_sdl_image = xyes; then
      AC_DEFINE(HAVE_SDL_IMAGE, 1, [SDL Image header is present.])
      AC_DEFINE(IMPL_IMAGE, 1, [Driver implements image commands])
      PACKAGE_LIBS="${PACKAGE_LIBS} -lSDL_image"
   fi

   dnl Check for guichan.hpp
   dnl see http://guichan.sourceforge.net/wiki/index.php"
   AC_MSG_CHECKING(for guichan forms support)
   have_guichan="maybe"
   AC_LANG_PUSH(C++)
   AC_CHECK_HEADER(guichan.hpp, [have_guichan="yes"], [have_guichan="no"])
   AC_LANG_POP(C++)
   AC_MSG_RESULT($have_guichan)
   if test x$have_guichan = xyes && test x$have_sdl_image = xyes; then
      dnl need SDL_Image as well
      AC_DEFINE(IMPL_UI, 1, [Guichan forms support found])
      PACKAGE_CFLAGS="${PACKAGE_CFLAGS} -DGUICHAN_BUILD -I/usr/local/include"
      PACKAGE_LIBS="-lguichan_sdl -lguichan ${PACKAGE_LIBS}"
   fi

   dnl preconfigured values for SDL build
   AC_DEFINE(_UnixOS, 1, [Building under Unix like systems.])
   AC_DEFINE(USE_TERM_IO, 0, [Does not use terminal-io functions.])
   AC_DEFINE(DEV_EVENTS_OSD, 1, [dev_events() implemented using osd_events().])
   AC_DEFINE(_SDL, 1, [Defined when building SDL version])

   BUILD_SUBDIRS="sync sync/sdl"
   AC_SUBST(BUILD_SUBDIRS)
}

function buildConsole() {
   AM_CONDITIONAL(WITH_HILDON, false)

   win32=no
   case "${host_os}" in
     *mingw* | pw32* | cygwin*)
        win32="yes"
   esac

   AC_DEFINE(_UnixOS, 1, [Building under Unix like systems.])
   AC_DEFINE(USE_TERM_IO, 1, [Uses terminal-io functions.])
   AC_DEFINE(DEV_EVENTS_OSD, 0, [dev_events() implemented using osd_events().])

   if test $win32 = yes; then
      dnl preconfigured values for cygwin console build (depends on cygwin.dll)
      echo "Building Cygwin console version..."
      AC_DEFINE(_CygWin, 1, [Building a minimal dev_null based command-line version.])
      AC_DEFINE(__CYGWIN__, 1, [as above])
      PACKAGE_LIBS="${PACKAGE_LIBS} -lm -lgcc -ltermcap"
      BUILD_SUBDIRS="sync sync/cygwin"
   else 
      dnl preconfigured values for unix console build
      echo "Building Unix console version..."
      AC_DEFINE(DRV_SOUND, 1, [Driver implements functions in drvsound.h])
      AC_DEFINE(UNIX_MEMMGR, 1, [Unix memory manager])
      AC_CHECK_HEADER(readline/readline.h, [], [AC_MSG_ERROR("install libreadline-dev")])
      PACKAGE_LIBS="${PACKAGE_LIBS} -lm -ldl -lpthread -lncurses -lreadline"
      BUILD_SUBDIRS="sync sync/unix"
   fi

   AC_SUBST(BUILD_SUBDIRS)
}

function buildDist() {
   BUILD_SUBDIRS="sync sync/gtk/src sync/gtk/data sync/gtk/icons"
   BUILD_SUBDIRS="${BUILD_SUBDIRS} sync/ide-fltk"
   BUILD_SUBDIRS="${BUILD_SUBDIRS} sync/sdl"
   BUILD_SUBDIRS="${BUILD_SUBDIRS} sync/cygwin"
   BUILD_SUBDIRS="${BUILD_SUBDIRS} sync/unix"
   AC_SUBST(BUILD_SUBDIRS)
   AM_CONDITIONAL(WITH_HILDON, false)
}

AC_DEFINE(HAVE_C_MALLOC, 1, [allocate memory with regular malloc calls])

checkPCRE

if test x$ac_build_dist = xyes; then
   buildDist
elif test x$ac_build_gtk = xyes; then
   buildGTK
elif test x$ac_build_fltk = xyes; then
   buildFLTK
elif test x$ac_build_sdl = xyes; then
   buildSDL
else
   buildConsole
fi  

checkDebugMode
checkForWindows

AC_OUTPUT([
Makefile
sync/Makefile
sync/gtk/src/Makefile
sync/gtk/data/sbasic.desktop
sync/gtk/data/com.nokia.sbasic.service
sync/gtk/data/Makefile
sync/gtk/icons/Makefile
sync/ide-fltk/Makefile
sync/sdl/Makefile
sync/cygwin/Makefile
sync/unix/Makefile
])

if test x$ac_build_dist = xyes; then
   make dist
fi

dnl End of "$Id: configure.in,v 1.38 2007-07-13 23:06:43 zeeb90au Exp $".
